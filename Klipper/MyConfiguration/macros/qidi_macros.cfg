[gcode_macro SHAPER_CALIBRATE]
rename_existing: RESHAPER_CALIBRATE
gcode:
  RESHAPER_CALIBRATE FREQ_START=30 FREQ_END=150

[gcode_macro HOT_CALIBRATE_START]
variable_k: 0
gcode:
  {% if k == 0 %}
    {% if printer['heater_generic chamber'].temperature > 44 %}
      SET_GCODE_VARIABLE MACRO=HOT_CALIBRATE_END VARIABLE=hot_set VALUE=1
      SET_GCODE_OFFSET Z_ADJUST=-0.10 MOVE=0
      SET_GCODE_VARIABLE MACRO=HOT_CALIBRATE_START VARIABLE=k VALUE=1
    {% endif %}
  {% endif %}

[gcode_macro HOT_CALIBRATE_END]
variable_hot_set: 0
gcode:
  {% if  hot_set == 1 %}
    SET_GCODE_VARIABLE MACRO=HOT_CALIBRATE_END VARIABLE=hot_set VALUE=0
    SET_GCODE_OFFSET Z_ADJUST=+0.10 MOVE=0
    SET_GCODE_VARIABLE MACRO=HOT_CALIBRATE_START VARIABLE=k VALUE=0
  {% endif %}

[gcode_macro PRINT_START]
gcode:
  HOT_CALIBRATE_START

[gcode_macro PRINT_START_QD]
gcode:
  HOT_CALIBRATE_START

[gcode_macro PRINT_END]
gcode:
  M106 P2 S0
  M106 P0 S0
  M106 P3 S0  #关闭活性炭风扇
  M104 S0
  M140 S0
  M141 S0
  M220 S100
  M221 S100
  SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
  CLEAR_PAUSE
  HOT_CALIBRATE_END
  SET_FILAMENT_SENSOR SENSOR=fila ENABLE=0
  M84
#  SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
#  SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
#  SET_STEPPER_ENABLE STEPPER=stepper_z enable=1
#  SET_STEPPER_ENABLE STEPPER=extruder enable=0
  BED_MESH_CLEAR      #恢复调平数据
  BED_MESH_PROFILE LOAD=default
  G31
  BEEP I=2 DUR=500

[gcode_macro PRINT_END_POWEROFF]
gcode:
  M107
  M104 S0
  M140 S0
  G28 Z
  M84
#  BEEP I=2 DUR=500
  M81	
    
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  {% if (printer.gcode_move.position.z) < 200 %}       ; check that zhop doesn't exceed z max
    G1 Z200 F600                                         
  {% endif %}
  G1  X0 Y0 F12000
  SDCARD_RESET_FILE
  PRINT_END
  BASE_CANCEL_PRINT

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
  # Parameters
  {% set z = params.Z|default(50)|int %}                                              ; z hop amount
    {% if printer['pause_resume'].is_paused|int == 0 %}     
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                         ; set z hop variable for reference in resume macro
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}; set hotend temp variable for reference in resume macro
#      SET_FILAMENT_SENSOR SENSOR=fila ENABLE=0                                       ; disable filament sensor       
      SAVE_GCODE_STATE NAME=PAUSE                                                     ; save current print position for resume                
      BASE_PAUSE                                                                      ; pause print
      {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}  ; check that zhop doesn't exceed z max
        G91                                                                           ; relative positioning
        G1 Z{z} F600                                                                  ; raise Z up by z hop amount
      {% else %}
#       { action_respond_info("Pause zhop exceeds maximum Z height.") }               ; if z max is exceeded, show message and set zhop value for resume to 0
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
      {% endif %}
      SAVE_GCODE_STATE NAME=PAUSEPARK2
      G90                                                                             ; absolute positioning
      G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} F6000; park toolhead at front center
      SAVE_GCODE_STATE NAME=PAUSEPARK                                                 ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
      M104 S0                                                                         ; turn off hotend
      SET_IDLE_TIMEOUT TIMEOUT=43200                                                  ; set timeout to 12 hours
      SET_STEPPER_ENABLE STEPPER=extruder enable=0
  {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
  # Parameters
  {% set e = params.E|default(2.5)|int %}                                        ; hotend prime amount (in mm)
    {% if printer['pause_resume'].is_paused|int == 1 %}
#     SET_FILAMENT_SENSOR SENSOR=fila ENABLE=1                                   ; enable filament sensor
      #INITIAL_RGB                                                               ; reset LCD color
      SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}; set timeout back to configured value
      {% if etemp > 0 %}
        M109 S{etemp|int}                                                        ; wait for hotend to heat back up
      {% endif %}
      RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=150                   ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
      G91                                                                        ; relative positioning
      M83                                                                        ; relative extruder positioning
      {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
        G1  E{e} F900                                                            ; prime nozzle by E, lower Z back down
#     {% else %}                      
#       G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
      {% endif %}  
      RESTORE_GCODE_STATE NAME=PAUSEPARK2 MOVE=1 MOVE_SPEED=150                           
      RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=10                        ; restore position
      BASE_RESUME                                                                ; resume print
  {% endif %}

[gcode_macro BEEP]
gcode:
  # Parameters
  {% set i = params.I|default(1)|int %}        ; Iterations (number of times to beep).
  {% set dur = params.DUR|default(100)|int %}  ; Duration/wait of each beep in ms. Default 100ms.
  {% if printer["output_pin sound"].value|int == 1 %}
    {% for iteration in range(i|int) %}
      SET_PIN PIN=beeper VALUE=1
      G4 P{dur}
      SET_PIN PIN=beeper VALUE=0
      G4 P{dur}
    {% endfor %}
  {% endif %}

[gcode_macro beep_on]
gcode:
  SET_PIN PIN=sound VALUE=1
    
[gcode_macro beep_off]
gcode:
  SET_PIN PIN=sound VALUE=0

#[gcode_macro _CG28]
#gcode:
#  {% if "xyz" not in printer.toolhead.homed_axes %}
#    G28
#  {% endif %}

[gcode_macro G29]
variable_k:1
gcode:
  {% if k|int==1 %}
    BED_MESH_CLEAR      #清除调平数据
#    G28   
    BED_MESH_CALIBRATE PROFILE=kamp  #自动调平
  {% endif %}

[gcode_macro G30]
gcode:
  BED_MESH_CLEAR      #清除调平数据
#  G28 
  BED_MESH_CALIBRATE mesh_min=10,10  mesh_max=310,310  METHOD=manual #手动动调平

[gcode_macro G31]
gcode:
  SET_GCODE_VARIABLE MACRO=G29 VARIABLE=k VALUE=1

[gcode_macro G32]
gcode:
  SET_GCODE_VARIABLE MACRO=G29 VARIABLE=k VALUE=0

[gcode_macro M0]
gcode:
  PAUSE

[gcode_macro M25]
rename_existing: M9925
gcode:
  PAUSE

[gcode_macro M84]
rename_existing: M84.1
gcode:
  SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
  SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
  SET_STEPPER_ENABLE STEPPER=stepper_z enable=0
  SET_STEPPER_ENABLE STEPPER=extruder enable=0
  SET_KINEMATIC_POSITION

[gcode_macro M106]
gcode:
  {% if params.P is defined %}
    {% if (params.P|int)==0 %}
        {% set FAN = "part_fan" %}
    {% endif %}
    {% if (params.P|int)==2 %}
        {% set FAN = "auxilary_fan" %}
    {% endif %}
    {% if (params.P|int)==3 %}
        {% set FAN = "exhaust_fan" %}
    {% endif %}
    {% set SPEED = (params.S|int if params.S is defined else 255) %}  
    SET_PIN PIN={FAN} VALUE={SPEED}
    # If [fan_generic (part|auxilary|exhaust)_fan] is used
    # SET_FAN_SPEED FAN={FAN} SPEED={SPEED}
  {% endif %} 

  {% if params.T is defined %}
    {% if (params.T|int)==-2 %}
    {% set SPEED = (params.S|int if params.S is defined else 255) %}  
    SET_PIN PIN=exhaust_fan VALUE={SPEED}   
    {% endif %}
  {% endif %}

  {% if params.P is undefined %}
    {% if params.T is undefined %}
    {% set SPEED = (params.S|int if params.S is defined else 255) %}  
    SET_PIN PIN=part_fan VALUE={SPEED}    
    {% endif %}
  {% endif %}


[gcode_macro M107]
gcode:  
  SET_PIN PIN=part_fan VALUE=0 #fan0
#  SET_PIN PIN=auxilary_fan VALUE=0 #fan2
#  SET_PIN PIN=exhaust_fan VALUE=0 #fan3

[gcode_macro M109]
rename_existing: M99109
gcode:
  #Parameters
  {% set s = params.S|float %}
  M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
  {% if s != 0 %}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
  {% endif %}

[gcode_macro M141]
gcode:
  SET_HEATER_TEMPERATURE HEATER=chamber TARGET={params.S}

[gcode_macro M204]
rename_existing: M99204
gcode:
  {% if params.S is defined %}
    {% set s = params.S|float %}
  {% endif %}
  {% if params.P is defined %}
    {% if params.T is defined %}
      {% set s = [params.P|float ,params.T|float] | min %}
    {% endif %}
  {% endif %}
  SET_VELOCITY_LIMIT ACCEL={s}
  SET_VELOCITY_LIMIT ACCEL_TO_DECEL={s/2}

[gcode_macro M290]
gcode:
  SET_GCODE_OFFSET Z_ADJUST={params.Z}

[gcode_macro M303]
gcode:
  {% if params.E is defined %}
    {% if params.S is defined %}
      {% if (params.E|int)==-1 %} 
        PID_CALIBRATE HEATER=heater_bed TARGET={params.S|int}
      {% endif %}
      {% if (params.E|int)==0 %}
        PID_CALIBRATE HEATER=extruder TARGET={params.S|int}
      {% endif %}
    {% endif %}
  {% endif %}

[gcode_macro M603]
description: filament unload
gcode:
  G92 E0
  G0  E15 F400
  G4  P1000
  G92 E0
  G1  E-80 F800

[gcode_macro M900]
gcode:
  {% if params.K is defined %} 
    SET_PRESSURE_ADVANCE ADVANCE={params.K}
  {% endif %}  
  {% if params.T is defined %}    
    SET_PRESSURE_ADVANCE SMOOTH_TIME={params.T}
  {% endif %} 

[gcode_macro M901]
gcode:
  G28
  SHAPER_CALIBRATE
  SAVE_CONFIG

[gcode_macro M1029]
gcode:
#  X_TWIST_PROFILE_LOAD NAME=default
#  X_TWIST_COMPENSATE_MESH MESH_NAME=default COMPENSATION_NAME=default
#  SAVE_CONFIG
 
[gcode_macro M4029]
gcode:
  BED_MESH_CLEAR
  G91 		 
	G1 Z10 F600 		 
	G90
  G28
  G1 X{printer.toolhead.axis_maximum.x/2 - printer.probe["x_offset"]} Y{printer.toolhead.axis_maximum.y/2 - printer.probe["y_offset"]} F7800
  G1 Z15 F600
  ABORT
  PROBE_CALIBRATE
  ABORT
  G0 Z0

[gcode_macro M8029]
gcode:
  {% if params.D is defined %}
    {% if (params.D|int)==1 %} 
      SET_FILAMENT_SENSOR SENSOR=fila  ENABLE=1
    {% endif %}
    {% if (params.D|int)==0 %} 
      SET_FILAMENT_SENSOR SENSOR=fila  ENABLE=0
    {% endif %}
  {% endif %}
